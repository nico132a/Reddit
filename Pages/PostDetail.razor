@page "/postdetail/{postId:int}"

@using shared.model
@using PostdataBlazor.Data
@inject PostDataService postDataService

<PageTitle>Post Details</PageTitle>

@if (post == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <p>Loading post details...</p>
    </div>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="post-content border rounded shadow p-4" style="max-width: 600px; width: 100%;">
            <h3 class="text-primary text-center">@post.Name</h3>
            <p class="text-center">@post.Text</p>
            <div class="d-flex justify-content-center align-items-center mb-4">
                <h2 class="text mb-0 me-2">Stem: </h2>
                <h2 class="text-center mb-0">@post.Value</h2>
            </div>

            <div class="voting-section text-center mb-4">
                <button class="btn btn-outline-secondary me-2" @onclick="UpvotePost">
                    <i class="fas fa-arrow-up"></i>
                </button>
                <span class="fw-bold">@post?.Value</span>
                <button class="btn btn-outline-secondary ms-2" @onclick="DownvotePost">
                    <i class="fas fa-arrow-down"></i>
                </button>
            </div>

            <!-- Tilføj kommentar -->
            <div class="mt-4">
                <input type="text" class="form-control" placeholder="Tilføj en kommentar..." @bind="newCommentText">
                <button class="btn btn-primary mt-2 w-100" @onclick="() => AddComment(post.PostId)">Add Comment</button>
            </div>

            <!-- kommentar området -->
            <h5 class="mt-4">Comments</h5>
            @if (post.Comments != null && post.Comments.Any())
            {
                <ul class="list-group">
                    @foreach (var comment in post.Comments)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center" @key="comment.CommentId != 0 ? comment.CommentId : Guid.NewGuid()">
                            <div>
                                <strong>@comment?.UserName:</strong> @comment?.Text
                            </div>
                            <div class="d-flex align-items-center">
                                <span class="me-3">@comment?.Value</span>
                                <button class="btn btn-outline-secondary btn-sm me-2" @onclick="() => UpvoteComment(post.PostId, comment.CommentId)">
                                    <i class="fas fa-arrow-up"></i>
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => DownvoteComment(post.PostId, comment.CommentId)">
                                    <i class="fas fa-arrow-down"></i>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-muted">No comments available.</p>
            }
        </div>
    </div>
}

@code {
    [Parameter] public int postId { get; set; }
    private PostData? post;
    private string newCommentText = "";

    private async Task AddComment(long postId)
    {
        if (!string.IsNullOrWhiteSpace(newCommentText))
        {
            var newComment = new Comment
                {
                   
                    Text = newCommentText,
                    UserName = "Mig",
                    Value = 2,
                    CreatedAt1 = DateTime.Now,
                    UpdatedAt1 = DateTime.Now,
                };


            await postDataService.AddComment(postId, newComment);


            newCommentText = "";


            post?.Comments.Add(newComment);

            StateHasChanged();
        }
    }

    private async Task UpvoteComment(long postId, long commentId)
    {
        var comment = post?.Comments.FirstOrDefault(c => c.CommentId == commentId);
        if (comment != null)
        {
            await postDataService.UpvoteComment(postId, commentId);
            comment.Value += 1;  
            StateHasChanged();   
        }
    }

    private async Task DownvoteComment(long postId, long commentId)
    {
        var comment = post?.Comments.FirstOrDefault(c => c.CommentId == commentId);
        
        {
            await postDataService.DownvoteComment(postId, commentId);
            comment.Value -= 1; 
            StateHasChanged(); // 
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadPostData();
    }

    private async Task LoadPostData()
    {

        var allPosts = await postDataService.GetPosts();
        post = allPosts.FirstOrDefault(p => p.PostId == postId);
    }

    private async Task UpvotePost()
    {
        if (post != null)
        {
            await postDataService.UpvotePost(post.PostId);
            post.Value += 1;
        }
    }

    private async Task DownvotePost()
    {
        if (post != null)
        {
            await postDataService.DownvotePost(post.PostId);
            post.Value -= 1;
        }
    }
}